;; vim:set sw=2 ts=2

;; External Values
(defpoll time :interval "1s"
  "date '+%I:%M:%S %p'")
(defpoll date :interval "1m"
  "date '+%a-%d'")

(defpoll volume-val :interval "3s"
  "~/.local/share/qde/lib/getvolume")

(defpoll mic-state :interval "3s"
  "~/.local/share/qde/lib/getmic")

(defpoll network-interfaces :interval "3s" :initial "[]"
  "~/.local/share/qde/lib/getnetworks")

(deflisten workspaces :initial "[]" "./scripts/listen-workspaces")

;; Widgets
(defwidget monitor [icon value ?unit]
  (box :class "monitor"
       :orientation "h"
       :space-evenly false
    (label :class "fa-icon" :text icon)
    (literal {round(value, 0)})
    (label :text {unit ?: "%"})
  ))

(defwidget battery [capacity status]
  (box :class "battery ${capacity > 15 ? "battery_normal" : "battery_low"}"
       :orientation "h"
       :space-evenly false
       :spacing 2
    (label :class "fa-icon" :angle 90
           :text {status == "Discharging" ? "\\uf242" : "\\uf376"})
    (box :space-evenly false
      (literal {round(capacity, 0)})
      (label :text "%")
    )))

(defwidget volume [value]
  (eventbox :onclick "pavucontrol &!"
    (box :class "volume"
         :orientation "h"
         :space-evenly false
         :spacing 3
      (label :class "fa-icon"
             :text {value == "-1" ? "\\uf6a9" : "\\uf58f"})
      (box :space-evenly false
           :visible {value != "-1"}
        (label :text value)
        (label :text "%")
      ))))

(defwidget mic [value]
  (eventbox :onclick "pavucontrol &!"
    (box :class "volume"
         :orientation "h"
         :space-evenly false
         :spacing 3
      (label :class "fa-icon"
             :text {value == "Mic ON" ? "\\uf130" : "\\uf131"})
      (box :space-evenly false
        (label :text value)
      ))))

(defwidget network [interface net]
  (box :class "network"
       :orientation "h"
       :space-evenly false
       :spacing 4
    (box :class "network_down"
         :orientation "h"
         :space-evenly false
      (label :text {round(net.NET_DOWN / 1000, 0)})
      (box :space-evenly false
           :spacing 2
        (label :text "kB")
        (label :class "fa-icon" :text "\\uf063")
      ))
    (box :class "network_icon"
         :orientation "h"
         :space-evenly false
      (label :class "fa-icon" :text {interface.wifi ? "\\uf1eb" : "\\uf108"})
    )
    (box :class "network_up"
         :orientation "h"
         :space-evenly false
      (box :space-evenly false
           :spacing 2
        (label :class "fa-icon" :text "\\uf062")
        (label :text {round(net.NET_UP / 1000, 0)})
      )
      (label :text "kB")
    )))

(defwidget workspace [ws]
  (box :class "workspace ${ws.focused ? "ws_focused" : ""} ${ws.pinned ? "" : "ws_unpinned"} ${ws.windows > 0 ? "ws_occupied" : "ws_empty"} ${ws.minimized > 0 ? "ws_hasminimized" : ""} ${ws.hasfullscreen ? "ws_hasfullscreen" : ""}"
       :orientation "h"
    (overlay
      (label :text "${ws.name}")
      (box :orientation "v"
           :space-evenly false
        (box :orientation "h"
             :halign "start"
             :space-evenly false
          (box :class "ws_infodot_top_left")))
      (box :orientation "v"
           :space-evenly false
          (box :class "ws_decoration_top_center"))
      (box :orientation "v"
           :space-evenly false
        (box :orientation "h"
             :halign "end"
             :space-evenly false
          (box :class "ws_infodot_top_right")))
      )))

(defwidget left []
  (box :class "left"
    :orientation "h"
    :space-evenly false
    :spacing 6
    (monitor :icon "\\uf538 "
             :value {EWW_RAM.used_mem_perc})
    (monitor :icon "\\uf2db "
             :value {EWW_CPU.avg})
    (monitor :icon "\\uf2c8 "
             :value {jq(EWW_TEMPS, '[to_entries | .[].value] | max')}
             :unit "Â°C")
    (mic :value mic-state)
    (box :orientation "h"
         :space-evenly false
         :spacing 4
      (for bat in {jq(EWW_BATTERY, '[.[] | select(type == "object")]')}
        (battery :capacity {bat.capacity}
                 :status {bat.status})))
  ))

(defwidget middle []
  (box :class "middle"
       :orientation "h"
       :halign "middle"
       :space-evenly false
       :spacing 6
    (label :text "${workspaces}" :visible false)
    (for workspace in workspaces
      (eventbox :onclick 'qdectl gotoworkspace "${workspace.name}" "${workspace.id}"'
        (workspace :ws workspace)))
  ))

(defwidget right []
  (box :class "right"
       :orientation "h"
       :halign "end"
       :space-evenly false
       :spacing 6
    (volume :value volume-val)
    (literal :content EWW_NET :visible false) ; required otherwise eww doesn't recognize the var is used
    (box :orientation "h"
         :space-evenly false
         :spacing 4
      (for interface in network-interfaces
        (network :interface interface :net {EWW_NET[interface.name]})))
    (box :class "time"
         :space-evenly false
      (label :class "fa-icon" :text "\\uf017 ")
    time)
    (box :class "date" date)
  ))

;; Bar
(defwidget bar []
  (centerbox :class "statusbar statusbar_floating"
             :orientation "h"
    (left)
    (middle)
    (right)
  ))

(defwindow bar
  :monitor 0
  :stacking "fg"
  ;; wayland
  :exclusive true
  :focusable false
  :namespace "qde-bar"
  ;; x11
  :reserve (struts :distance "34px" :side "top")
  :geometry (geometry
    :x "0%"
    :y "0%"
    :width "100%"
    :height "0px"
  :anchor "top center")
  (bar))
