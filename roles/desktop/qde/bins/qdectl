#!/bin/bash
QDECTL_VERSION="0.1.4"

QDE_LIB=${QDE_LIB:-"$HOME/.local/share/qde/lib"}

## Dependencies {{{
jq_bin="jq"
if command -v jaq &> /dev/null; then
    jq_bin="jaq"
fi
## }}}

## Utils {{{
# https://stackoverflow.com/a/44793442
function dict2json {
    declare -n v=$1
    printf '%s\0' "${!v[@]}" "${v[@]}" |
    jq -Rs -Mc 'split("\u0000") | . as $v | (length / 2) as $n | reduce range($n) as $idx ({}; .[$v[$idx]]=$v[$idx+$n])'
}
## }}}

## Minimize {{{
MINIMIZED_STATE_SAVEFILE="/tmp/qde.minimized"

function cmd_minimize {
    case "$1" in
        minimize)
            focused_ws=$(hyprctl activeworkspace -j | "$jq_bin" -cr '.name')
            win_addr=$(hyprctl activewindow -j | "$jq_bin" -cr '.address')
            hyprctl dispatch movetoworkspacesilent "special:minimized:$focused_ws"
            declare -A state
            if [[ -f "$MINIMIZED_STATE_SAVEFILE" ]]; then
                source "$MINIMIZED_STATE_SAVEFILE"
            fi
            state[$win_addr]=$(date +%s)
            declare -p state > "$MINIMIZED_STATE_SAVEFILE"
            ;;
        unminimize)
            focused_ws=$(hyprctl activeworkspace -j | "$jq_bin" -cr '.name')
            addr="$2"
            if [[ -z $addr ]]; then
                >&2 echo "Usage: $(basename $0) unminimize <addr>"
                >&2 echo "> Missing address parameter."
                exit 1
            fi
            hyprctl dispatch movetoworkspace "$focused_ws,address:$addr"
            declare -A state
            if [[ -f "$MINIMIZED_STATE_SAVEFILE" ]]; then
                source "$MINIMIZED_STATE_SAVEFILE"
            fi
            unset "state[$addr]"
            declare -p state > "$MINIMIZED_STATE_SAVEFILE"
            ;;
        list-minimized)
            focused_ws=$(hyprctl activeworkspace -j | "$jq_bin" -cr '.name')
            special_ws="special:minimized:$focused_ws"
            declare -A state
            if [[ -f "$MINIMIZED_STATE_SAVEFILE" ]]; then
                source "$MINIMIZED_STATE_SAVEFILE"
            fi
            if [[ $jq_bin == "jaq" ]]; then
                hyprctl clients -j | jaq -c --color never --arg state "$(dict2json state)" \
                    '[.[] | select(.workspace.name == "'"$special_ws"'") | {address,pid,title,class,minimized_at:(($state | fromjson)[.address]//0)}]'
            else
                hyprctl clients -j | "$jq_bin" -Mc --argjson state "$(dict2json state)" \
                    '[.[] | select(.workspace.name == "'"$special_ws"'") | {address,pid,title,class,minimized_at:($state[.address]//0)}]'
            fi
            ;;
        pop-minimized)
            last_minimized=$(cmd_minimize list-minimized | jq -cr "sort_by(.minimized_at) | last | .address")
            if [[ $last_minimized == "null" ]]; then
                return 0
            fi
            cmd_minimize unminimize "$last_minimized"
            ;;
        *)
            return 1
    esac
}
## }}}

case "$1" in
    getwm)
        "$QDE_LIB/getwm"
        ;;
    getworkspaces)
        "$QDE_LIB/getworkspaces"
        ;;
    getnetworks)
        "$QDE_LIB/getnetworks"
        ;;
    gotoworkspace)
        shift
        "$QDE_LIB/gotoworkspace" $@
        ;;
    minimize|unminimize|list-minimized|pop-minimized)
        cmd_minimize "$@"
        ;;
    *)
        echo "QDE Control Tool - v$QDECTL_VERSION"
        echo "Usage: $(basename $0) <command>"
        echo
        echo "Commands:"
        echo "  getwm - Get the current supported window manager"
        echo "  getworkspaces - List workspaces, including QDE data (JSON)"
        echo "  getnetworks - List internet network interfaces and their type (JSON)"
        echo
        echo "  gotoworkspace <name> <id> - Go to a workspace. Either name or id will be used depending on the wm"
        echo
        echo "  minimize - Minimize the focused window"
        echo "  unminimize <addr> - Unminimize a window"
        echo "  list-minimized - List minimized windows in the current workspace (JSON)"
        echo "  pop-minimized - Unminimize the last minimized window in the current workspace"
        ;;
esac
