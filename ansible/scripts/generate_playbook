#!/usr/bin/env python3

import sys
import os
import yaml

from pathlib import Path
import shutil


def get_sys_platfrom():
    id = sys.platform.lower()
    if id.startswith("linux"):
        return "linux"
    if id.startswith("win"):
        return "windows"
    if id.startswith("darwin"):
        return "macos"
    return id


SYS_PLATFORM = get_sys_platfrom()


PKG_MANAGERS = {
    "brew": (True, [
        ("community.general.homebrew", ("name", "{0}")),
        ("when", "ansible_distribution == 'MacOSX'"),
    ], "homebrew"),
    "pacman": (True, [
        ("community.general.pacman", ("package", "{0}")),
        ("when", "ansible_pkg_mgr == 'pacman'"),
        ("become", True),
    ], "pacman"),
    "aur": (True, [
        ("kewlfft.aur.aur", [("use", "paru"), ("name", "{0}")]),
        ("when", "ansible_pkg_mgr == 'pacman'")
    ], "paru"),
    "pkgbuild": (True, [
        ("kewlfft.aur.aur", [("use", "makepkg"), ("name", "{0}"),
            ("local_pkgbuild", "{{{{ install_src }}}}/pkg/PKGBUILDS/{0[0]}")]),
        ("when", "ansible_pkg_mgr == 'pacman'")
    ], "makepkg"),
}
STANDALONE_TASKS = os.path.abspath(os.path.join("ansible", "standalone_tasks"))


## Packages

def generate_install_file_contents(pkgs_desc):
    contents = []
    require_package_facts = False
    if "_" in pkgs_desc:
        # Alternative way allowing to comment groups
        groups = pkgs_desc["_"]
        for group in groups:
            for pkg_manager in group.keys():
                if not pkg_manager in PKG_MANAGERS.keys():
                    continue
                require_package_facts |= generate_pkgs_contents(pkg_manager, group[pkg_manager], contents)
    else:
        for pkg_manager in PKG_MANAGERS.keys():
            if not pkg_manager in pkgs_desc:
                continue
            require_package_facts |= generate_pkgs_contents(pkg_manager, pkgs_desc[pkg_manager], contents)
    if require_package_facts:
        contents.insert(0, { "include_tasks": f"{STANDALONE_TASKS}/gather_package_facts.yml" })
    return contents


def generate_pkgs_contents(pkg_manager, pkgs, contents):
    require_package_facts = False
    if not isinstance(pkgs, list):
        pkgs = [pkgs]
    str_pkgs, dict_pkgs = [], []
    for pkg in pkgs:
        if isinstance(pkg, dict):
            dict_pkgs.append(pkg)
        elif isinstance(pkg, str):
            str_pkgs.append(pkg)

    support_list, items, rename = PKG_MANAGERS[pkg_manager]
    if support_list and len(str_pkgs) > 0:
        entry = { "name": f"Install {','.join(str_pkgs)} with {rename}" }
        for append in items:
            write_to_entry(entry, str_pkgs, append)
        contents.append(entry)
    elif not support_list:
        for pkg in str_pkgs:
            entry = { "name": f"Install {pkg} with {rename}" }
            for append in items:
                write_to_entry(entry, pkg, append)
            contents.append(entry)

    for dict_pkg in dict_pkgs:
        name = dict_pkg["name"]
        unless = dict_pkg.get("unless")

        entry = { "name": f"Install {name} with {rename}" }
        for append in items:
            write_to_entry(entry, name, append)
        if unless is not None:
            require_package_facts = True
            if not isinstance(unless, list):
                unless = [unless]
            when = [f"'{pkg}' not in ansible_facts.packages" for pkg in unless]
            entry["when"] = " and ".join(when)
        contents.append(entry)
    return require_package_facts


def write_to_entry(entry, pkg, append):
    key, val = append
    if isinstance(val, tuple):
        sub = {}
        write_to_entry(sub, pkg, val)
        entry[key] = sub
    elif isinstance(val, list):
        sub = {}
        for subval in val:
            write_to_entry(sub, pkg, subval)
        entry[key] = sub
    elif isinstance(pkg, list) and val == "{0}":
            entry[key] = pkg
    elif isinstance(val, str):
        entry[key] = val.format(pkg)
    else:
        entry[key] = val

## Generate

def write_yml_file(path, yml_dict):
    with open(path, "w") as file:
        dump = "\n".join([
            "# This file was auto-generated.",
            "# See `ansible/scripts/generate_playbook",
            "",
            yaml.dump(yml_dict)
        ])
        file.write(dump)


def visit_then_write_tasks(src_path, dest_path, group: str, role: str):
    # a shadow role is an extension of a role in the private repository
    shadow_path = os.path.join("priv", "shadow", group, role)

    tasks_dir = os.path.join(src_path, "tasks")
    import_tasks = []
    for a_tasks_dir in [tasks_dir, os.path.join(shadow_path, "tasks")]:
        if os.path.isdir(a_tasks_dir):
            import_tasks.extend([os.path.abspath(path) for path in Path(a_tasks_dir).rglob("*.yml")])
        else:
            continue
        sys_specific_tasks_dir = os.path.join(a_tasks_dir, SYS_PLATFORM)
        if os.path.isdir(sys_specific_tasks_dir):
            import_tasks.extend([os.path.abspath(path) for path in Path(sys_specific_tasks_dir).rglob("*.yml")])

    pkgs_path = os.path.join(src_path, "packages.yml")
    if os.path.isfile(pkgs_path):
        install_file_path = os.path.join(dest_path, "install_packages.yml")
        with open(pkgs_path, "r") as fs:
            try:
                pkgs_desc = yaml.safe_load(fs)
                install_contents = generate_install_file_contents(pkgs_desc)
                if install_contents:
                    write_yml_file(install_file_path, install_contents)
                    import_tasks.insert(0, "install_packages.yml")
            except yaml.YAMLError:
                print(f"YAML file '{pkgs_path}' cannot be parsed.", file=sys.stderr)

    if import_tasks:
        main = [include_task_entry(task, group.startswith("_")) for task in import_tasks]
        write_yml_file(os.path.join(dest_path, "main.yml"), main)

    # print(f"Written tasks for {group}/{role}")


def include_task_entry(task, important):
    basename = os.path.basename(task)
    if basename.startswith("install"):
        pass_kind = "install"
    else:
        pass_kind = "config"
    return {
        "block": [{
            "name": "{0} ({1})".format(basename, pass_kind),
            "include_tasks": task,
        }],
        "when": "df_pass_kind == '{0}'".format(pass_kind),
        "ignore_errors": not important,
    }

if __name__ == "__main__":
    out_roles_dir = os.path.join("ansible", ".generated", "roles")
    roles = []

    for group in os.listdir("roles"):
        roles_dir = os.path.join("roles", group)
        if not os.path.isdir(roles_dir):
            continue

        for role in os.listdir(roles_dir):
            role_dir = os.path.join(roles_dir, role)
            if not os.path.isdir(role_dir):
                continue
            mapped_role_dir = os.path.join(out_roles_dir, role)

            tasks_dir = os.path.join(mapped_role_dir, "tasks")
            for dir in [tasks_dir]:
                if not os.path.isdir(dir):
                    os.makedirs(dir)

            visit_then_write_tasks(role_dir, tasks_dir, group, role)
            handlers_dir = os.path.join(role_dir, "handlers")
            if os.path.isdir(handlers_dir):
                shutil.copytree(handlers_dir, os.path.join(mapped_role_dir, "handlers"))
            meta_dir = os.path.join(role_dir, "meta")
            if os.path.isdir(meta_dir):
                shutil.copytree(meta_dir, os.path.join(mapped_role_dir, "meta"))
            roles.append({"role": role, "tags": [group, role]})

    playbook = [{
        "name": "Copy/link config files (df_pass_kind == config)",
        "hosts": "local",
        "vars_files": [
            "../default_vars.yml",
            "env_vars.yml",
        ],
        "vars": {
            "df_pass_kind": "config"
        },
        "roles": roles,
    }]
    write_yml_file(os.path.join("ansible", ".generated", "playbook-config.yml"), playbook)

    playbook[0]['name'] = "Download/install software"
    playbook[0]['vars']['df_pass_kind'] = "install"
    write_yml_file(os.path.join("ansible", ".generated", "playbook-install.yml"), playbook)
