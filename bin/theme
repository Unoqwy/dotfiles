#!/usr/bin/env python3
import sys
from os import path, mkdir

import argparse
import yaml
from jinja2 import Template

import dflib.vars

DEFAULT_THEME = "sonokai"

parser = argparse.ArgumentParser(
    description="Set dotfiles theme"
)
parser.add_argument("theme", type=str, nargs="?")

df_dir = path.realpath(path.join(path.basename(__file__), ".."))
root_dir = path.join(df_dir, "themes")
templates_dir = path.join(root_dir, "templates")
templates_file = path.join(root_dir, "_templates.yml")
current_dir = path.join(root_dir, "current")
current_name = path.join(current_dir, "_name")


def resolve_val(theme, val):
    ns = val.split(":", 1)
    if len(ns) < 2:
        return val
    match ns[0]:
        case "v":
            lookup = theme["v"]
        case "term":
            lookup = theme["term"]
        case _:
            return val
    key = ns[1]
    if not key in lookup:
        print(f"Variable '{val}' could not be resolved!", file=sys.stderr)
        exit(1)
    return resolve_val(theme, lookup[key])


def resolve_env(theme, env, key):
    if key in env:
        resolved = env[key]
        for k, v in env[key].items():
            val = resolve_val(theme, v)
            if val.startswith("#"):
                val = val.lower() # make hex color lowercase, some programs (i.e. tmux) don't like uppercase
            resolved[k] = val
        return resolved
    else:
        return {}


if __name__ == "__main__":
    args = parser.parse_args()

    if args.theme is None:
        # rebuild current theme
        theme_name = DEFAULT_THEME
        if path.isfile(current_name):
            with open(current_name, "r") as fs:
                theme_name = fs.read().strip()
    else:
        theme_name = args.theme.lower()
        if theme_name == "default":
            theme_name = DEFAULT_THEME

    file = path.join(root_dir, f"{theme_name}.yml")
    if not path.isfile(file):
        print(f"Theme '{theme_name}' does not exist", file=sys.stderr)
        exit(1)

    try:
        with open(templates_file, "r") as fs:
            templates = yaml.safe_load(fs)
    except yaml.YAMLError:
        print(f"YAML file '{templates_file}' cannot be parsed.", file=sys.stderr)
        exit(1)

    try:
        with open(file, "r") as fs:
            theme = yaml.safe_load(fs)
    except yaml.YAMLError:
        print(f"YAML file '{file}' cannot be parsed.", file=sys.stderr)
        exit(1)

    if not path.isdir(current_dir):
        mkdir(current_dir)


    term_env = resolve_env(theme, theme, "term")
    vars = dflib.vars.load_dotenv_vars(df_dir)
    for key, template in templates.items():
        env = resolve_env(theme, theme["templates"], key)
        with open(path.join(templates_dir, template["src"]), "r") as src:
            jinja = Template(src.read())
            out = jinja.render(v=env, term=term_env, **vars)
            if template["dest"].startswith("/"):
                out_file = path.join(df_dir, template["dest"][1:])
            else:
                out_file = path.join(current_dir, template["dest"])
            with open(out_file, "w+") as dest:
                dest.write(out)
        print(f"Template '{key}' OK")

    with open(current_name, "w+") as fs:
        fs.write(theme_name)
    print(f"Dotfiles theme set to '{theme_name}'!")
